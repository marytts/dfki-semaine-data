group 'de.dfki.mary'
version '0.2-SNAPSHOT'
description 'Speech databases for the SEMAINE TTS voices'

import org.yaml.snakeyaml.*

subprojects {
    ext {
        yamlFile = file("dfki-$project.name-data.yaml")
        flacFile = file("$buildDir/dfki-$project.name-data.flac")
    }

    task calculateOffsets(type: Exec) {
        def scriptFile = file("$rootDir/offsets.praat")
        commandLine 'praat', '--run', scriptFile
        doFirst {
            def dir1 = 'wav'
            def dir2 = 'wav_16k'
            def fileSet = fileTree(dir1).include('*.wav').collect {
                it.name
            }.intersect(fileTree(dir2).include('*.wav').collect { it.name })
            def list1File = file("$temporaryDir/wav1.lst")
            list1File.text = fileSet.collect { file("$project.name/$dir1/$it") }.join('\n')
            def list2File = file("$temporaryDir/wav2.lst")
            list2File.text = fileSet.collect { file("$project.name/$dir2/$it") }.join('\n')
            commandLine += [list1File, list2File]
        }
    }

    task processYaml << {
        def offsetsFile = file('offsets.yaml')
        def offsets = new Yaml().load(offsetsFile.text)
        def data = new Yaml().load(yamlFile.text)
        data.each {
            def prompt = it.prompt
            if (it.segments && it.segments[0].dur <= 0) {
                it.segments[1].dur = (it.segments[1].dur + it.segments[0].dur).round(6)
                it.segments = it.segments.drop(1)
            }
        }
        def opts = new DumperOptions()
        opts.defaultFlowStyle = DumperOptions.FlowStyle.BLOCK
        yamlFile.text = new Yaml(opts).dump(data)
    }

    task extractText(type: ExtractText, description: "Extract text files to $buildDir.name/text")

    task extractLab(type: ExtractLab, description: "Extract label files to $buildDir.name/lab")

    task extractTextGrid(type: ExtractTextGrid, description: "Generate Praat TextGrid")

    task downloadAudio(type: DownloadAudio, description: "Download audio file to $buildDir.name/$flacFile.name")

    task extractWav(type: ExtractWav, description: "Extract audio files to $buildDir.name/wav", dependsOn: downloadAudio)

    task clean(description: 'Delete the build directory') << {
        delete fileTree(buildDir).exclude(flacFile.name)
    }
}
